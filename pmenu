#!/usr/bin/env python
import os
import sys
import re
import signal
import difflib
import curses
import argparse

prompt_text = "> "
query_text = ''
input_items = sys.stdin.read().splitlines()
filtered_items = None
selection_index = 0

def signal_handler(signum, frame):
    sys.exit(130)
signal.signal(signal.SIGINT, signal_handler)

def filter_items():
    global filtered_items

    filtered_items = []
    query_text_regex = re.compile(r".*".join(re.escape(c) for c in query_text), flags=re.IGNORECASE)
    for input_item in input_items:
        if query_text and not query_text_regex.search(input_item):
            continue

        if query_text:
            item_score = difflib.SequenceMatcher(None, input_item, query_text).quick_ratio()
        else:
            item_score = 1
        filtered_items.append((input_item, item_score))

    if query_text:
        filtered_items = sorted(filtered_items, key=lambda filtered_item: filtered_item[1], reverse=True)

def redraw(window):
    window.erase()

    window.addstr(prompt_text)

    for i, filtered_item in enumerate(filtered_items[:curses.LINES - 1]):
        item_attr = curses.A_REVERSE if i == selection_index else curses.A_NORMAL
        window.insstr(i + 1, 0, filtered_item[0][:curses.COLS], item_attr)

    query_text_offset = len(query_text) - (curses.COLS - len(prompt_text) - 1)
    if query_text_offset < 0:
        query_text_offset = 0
    window.addstr(0, len(prompt_text), query_text[query_text_offset:])

    window.refresh()

def change_selection(new_selection_index):
    global selection_index

    if new_selection_index < 0 or new_selection_index >= min(len(filtered_items), curses.LINES - 1):
        return

    selection_index = new_selection_index

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--name', help="MRU list name")

    return parser.parse_args()

def process_input_items():
    global input_items

    if not args.name:
        return

    cache_dir = os.environ.get('XDG_CACHE_HOME', os.path.join(os.path.expanduser('~'), '.cache'))
    pmenu_dir = os.path.join(cache_dir, 'pmenu')
    os.makedirs(pmenu_dir, exist_ok=True)
    pmenu_path = os.path.join(pmenu_dir, args.name)
    if os.path.exists(pmenu_path):
        cache_items = open(pmenu_path).read().splitlines()
        cache_items = [i for i in cache_items if i in input_items]
        input_items = cache_items + [i for i in input_items if i not in cache_items]

def main(window):
    global query_text, selection_index

    terminal_file = open("/dev/tty")
    os.dup2(terminal_file.fileno(), 0)

    filter_items()
    redraw(window)

    while True:
        char = window.get_wch()
        keyname = curses.keyname(char).decode('utf8') if isinstance(char, int) else None
        keyname_string = curses.keyname(ord(char)).decode('utf8') if isinstance(char, str) else None
        if char == curses.KEY_RESIZE:
            y, x = window.getmaxyx()
            curses.resizeterm(y, x)
            selection_index = 0
            redraw(window)
            continue
        elif char == '\b' or keyname == 'KEY_BACKSPACE':
            query_text = query_text[:-1]
        elif isinstance(char, int):
            continue
        elif char == '\n':
            return
        elif keyname_string == '^G':
            sys.exit(130)
        elif keyname_string == '^U':
            query_text = ''
        elif keyname_string == '^W':
            query_text = re.sub(r"\w*[^\w]*$", '', query_text)
        elif keyname_string == '^N':
            change_selection(selection_index + 1)
            redraw(window)
            continue
        elif keyname_string == '^P':
            change_selection(selection_index - 1)
            redraw(window)
            continue
        elif len(keyname_string) == 2 and keyname_string[0] == '^':
            continue
        else:
            query_text += char

        selection_index = 0
        filter_items()
        redraw(window)

args = parse_args()
process_input_items()

curses.wrapper(main)

if selection_index < len(filtered_items) - 1:
    print(filtered_items[selection_index][0])
else:
    print(query_text)
