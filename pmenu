#!/usr/bin/env python
import os
import sys
import re
import signal
import unicodedata
import curses

prompt_text = "> "
query_text = ''
input_items = sys.stdin.read().splitlines()
filtered_items = None

def signal_handler(signum, frame):
    sys.exit(130)
signal.signal(signal.SIGINT, signal_handler)

def filter_items():
    global filtered_items

    filtered_items = []
    for input_item in input_items:
        filtered_items.append(input_item)

def exit():
    sys.exit()

def redraw(window):
    window.erase()

    window.addstr(prompt_text)

    for i, filtered_item in enumerate(filtered_items[:curses.LINES - 1]):
        window.insstr(i + 1, 0, filtered_item[:curses.COLS])

    query_text_offset = len(query_text) - (curses.COLS - len(prompt_text) - 1)
    if query_text_offset < 0:
        query_text_offset = 0
    window.addstr(0, len(prompt_text), query_text[query_text_offset:])

    window.refresh()

def main(window):
    global query_text

    terminal_file = open("/dev/tty")
    os.dup2(terminal_file.fileno(), 0)

    while True:
        filter_items()
        redraw(window)

        char = window.get_wch()
        if char == curses.KEY_RESIZE:
            y, x = window.getmaxyx()
            curses.resizeterm(y, x)
            redraw(window)

            continue
        elif not isinstance(char, str):
            continue
        elif char == '\n':
            exit()
        elif char == '\b':
            query_text = query_text[:-1]

        keyname = curses.keyname(ord(char)).decode('utf8')
        if keyname == '^G':
            exit()
        elif keyname == '^U':
            query_text = ''
        elif keyname == '^W':
            query_text = re.sub(r"\w*[^\w]*$", '', query_text)
        elif len(keyname) == 2 and keyname[0] == '^':
            continue
        else:
            query_text += char

curses.wrapper(main)
